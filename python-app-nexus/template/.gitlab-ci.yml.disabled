# .gitlab-ci.yml
stages:
  - build
  - deploy

# Global defaults for docker buildx (Docker-in-Docker)
image: docker:24.0
services:
  - docker:24.0-dind

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  # shorten commit to 6 chars
  COMMIT_ID: "${CI_COMMIT_SHA:0:6}"

# Build & push image to Docker Hub
build:
  stage: build
  rules:
    - changes:
        - src/**/*  # only run when app code changes
      when: on_success
    - when: manual  # allow manual runs too
  before_script:
    - docker info
  script:
    # Login to Docker Hub
    - echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin

    # Enable buildx (optional but recommended)
    - docker buildx create --use
    - docker buildx bake || true  # ignore if no bake file; buildx still initialized

    # Build & push
    - docker buildx build --push -t "tyrelfecha/${CI_PROJECT_NAME}:${COMMIT_ID}" .

    # Expose COMMIT_ID to downstream job via dotenv artifact
    - echo "COMMIT_ID=${COMMIT_ID}" >> build.env
  artifacts:
    reports:
      dotenv: build.env
    expire_in: 1 day

# Deploy via ArgoCD (uses a self-hosted runner)
deploy:
  stage: deploy
  needs: ["build"]
  tags: ["self-hosted"]   # <-- make sure your runner has this tag
  image: alpine:3.20
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
  before_script:
    - apk add --no-cache git curl bash python3 py3-pip
    # yq (Mike Farah) binary
    - YQ_VERSION=v4.44.3
    - wget -q "https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_amd64" -O /usr/local/bin/yq
    - chmod +x /usr/local/bin/yq
    # ArgoCD CLI
    - curl -ksSL -o /usr/local/bin/argocd https://raw.githubusercontent.com/argoproj/argo-cd/stable/dist/argocd-linux-amd64
    - chmod +x /usr/local/bin/argocd
    # Git identity for committing the values bump
    - git config --global user.email "${GIT_USER_EMAIL:-ci-bot@nms.local}"
    - git config --global user.name  "${GIT_USER_NAME:-NMS CI Bot}"
  script:
    # Ensure we have the repo remote writable; prefer PAT over CI_JOB_TOKEN for protected branches
    # If using PAT:
    #   - Set REPO_PUSH_TOKEN with "api" & "write_repository" scopes (masked, protected).
    #   - Set GIT_REMOTE to https://oauth2:${REPO_PUSH_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git
    # If using CI_JOB_TOKEN (requires Project Settings -> CI/CD -> 'Allow pipeline to push'):
    #   - Set GIT_REMOTE to https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git
    - export GIT_REMOTE="${GIT_REMOTE:-https://oauth2:${REPO_PUSH_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git}"

    # Make sure we’re on the branch we’re deploying
    - git checkout "$CI_COMMIT_BRANCH"
    - git pull --no-rebase origin "$CI_COMMIT_BRANCH"

    # Update Helm values file with the short image tag from build job
    - echo "Using COMMIT_ID=${COMMIT_ID}"
    - yq -i '.image.tag = strenv(COMMIT_ID)' "charts/${{values.app_name}}/values-${{values.app_env}}.yaml"

    # Commit and push the change
    - git add "charts/${{values.app_name}}/values-${{values.app_env}}.yaml"
    - git commit -m "chore(ci): bump image tag to ${COMMIT_ID}"
    - git push "$GIT_REMOTE" "HEAD:$CI_COMMIT_BRANCH"

    # ArgoCD login
    - argocd login argocd-server.argocd --insecure --grpc-web \
        --username "${ARGOCD_USERNAME:-admin}" \
        --password "${ARGOCD_PASSWORD}"

    # Ensure the Git repo is registered in ArgoCD
    - REPO_URL="${CI_REPOSITORY_URL}"   # HTTPS repo URL provided by GitLab CI
    - argocd repo list | grep -q "$REPO_URL" || argocd repo add "$REPO_URL"

    # Create the app if missing (names & paths templated by Backstage values)
    - |
      APP_NAME="${{values.app_name}}"
      NAMESPACE="${{values.app_env}}"
      CHART_PATH="charts/${{values.app_name}}"
      VALUES_FILE="values-${{values.app_env}}.yaml"

      if ! argocd app get "$APP_NAME" >/dev/null 2>&1; then
        argocd app create "$APP_NAME" \
          --repo "$REPO_URL" \
          --path "$CHART_PATH" \
          --dest-namespace "$NAMESPACE" \
          --dest-server https://kubernetes.default.svc \
          --values "$VALUES_FILE" \
          --revision "$CI_COMMIT_BRANCH" \
          --sync-policy manual \
          --sync-option CreateNamespace=true
      fi

    # Sync & wait
    - argocd app sync "${{values.app_name}}"
    - argocd app wait "${{values.app_name}}" --timeout 180
